
-- (-517.638 / 1931.852) describes the slope of the slide (for every 1 stud travelled horizontally, (-517.638 / 1931.852) studs are travelled vertically)

-- assign services
local twsv = game:GetService('TweenService')
local servstor = game:GetService('ServerStorage')
local repl  = game:GetService('ReplicatedStorage')

-- determines length of the play area
local SLIDE_LENGTH = 8

local events = game.ReplicatedStorage.Events

local rainbowpart = workspace.Slide.RainbowPart
local deathpart = workspace.Slide.DeathPart
local winpart = workspace.WinPart

-- assigns modules to variables
local funmod = require(script.Parent.Functions)
local datamod = require(script.Parent.Data)
local worldmod = {}

-- adds a win and some points to a player's permanent record
worldmod.declareWinner = function(plr)
	local char = plr.Character
	local canwin = char.CanWin
	
	if canwin.Value then
		canwin.Value = false
		events.Winner:FireClient(plr)
		datamod.increment(plr, 'Wins', 1)
		datamod.increment(plr, 'Points', 100)
	end
end

-- forces any player which touches the rainbow part to sit
rainbowpart.Touched:Connect(function(hit)
	local plr, char = funmod.GetPlayerFromHit(hit)
	if plr and char then
		local hum = char:WaitForChild('Humanoid')
		hum.Sit = true
	end
end)

-- kills any player character which touches the death part
deathpart.Touched:Connect(function(hit)
	local plr, char = funmod.GetPlayerFromHit(hit)
	if plr and char then
		local hum = char:WaitForChild('Humanoid')
		hum.Health = 0
	end
end)

-- creates the rainbow slide which will sit any player who touches it
for i = 1, SLIDE_LENGTH do
	local rclone = rainbowpart:Clone()
	rclone.Position =
		rainbowpart.Position + (Vector3.new(0, -517.638, 1931.852) * i)
	rclone.Parent = workspace.Slide
	rclone.Touched:Connect(function(hit)
		local plr, char = funmod.GetPlayerFromHit(hit)
		if plr and char then
			local hum = char:WaitForChild('Humanoid')
			hum.Sit = true
		end
	end)
end

-- creates an invisible 'death slide' under the rainbow slide which kills any player who touches it to ensure players die and respawn quickly once they fall off the slide
for i = 1, SLIDE_LENGTH + 1 do
	local dclone = deathpart:Clone()
	dclone.Position =
		rainbowpart.Position +
		(Vector3.new(0, -517.638, 1931.852) * i) +
		Vector3.new(0, -70, 0)
	if i == SLIDE_LENGTH then
		dclone.Position = dclone.Position + Vector3.new(0, -280, 0)
	end
	dclone.Parent = workspace.Slide
	dclone.Touched:Connect(function(hit)
		local plr, char = funmod.GetPlayerFromHit(hit)
		if plr and char then
			local hum = char:WaitForChild('Humanoid')
			hum.Health = 0
		end
	end)
end

-- sits any player who is above the slide
workspace.StandPart.Touched:Connect(function(hit)
	local plr, char = funmod.GetPlayerFromHit(hit)
	if not plr then return end
	
	local hum = char:WaitForChild('Humanoid')
	hum.Sit = true
	
	-- makes each player slippery for fast travel on the slide
	for _, part in pairs(char:GetChildren()) do
		if part:IsA('BasePart') then
			part.CustomPhysicalProperties = PhysicalProperties.new(
				0.7, 0, 0.4
			)
		end
	end
end)
workspace.WinPart.Position = Vector3.new(0, -2540.511, 16771.928)
winpart.Touched:Connect(function(hit)
	local plr, char = funmod.GetPlayerFromHit(hit)
	if not plr then return end
	worldmod.declareWinner(plr)
end)

-- moves the win platform
workspace.WinPlatform:SetPrimaryPartCFrame(
	CFrame.new(0, 0, 0)
)
workspace.WinPlatform:SetPrimaryPartCFrame(
	CFrame.new(rainbowpart.Position +
		Vector3.new(0, -4540.511, 16771.928)) *
		CFrame.Angles(0, 0, math.rad(90))
)
-- any player who touches the win platform are declared winners
for _, part in pairs(workspace.WinPlatform:GetChildren()) do
	if part:IsA('BasePart') then
		part.Touched:Connect(function(hit)
			local plr, char = funmod.GetPlayerFromHit(hit)
			if not plr then return end
			worldmod.declareWinner(plr)
		end)
	end
end
-- button which sends players back to the top of the slide
workspace.WinPlatform.BackToTopStand.Button.Touched:Connect(function(hit)
	local plr, char = funmod.GetPlayerFromHit(hit)
	if plr and char then
		local root = char:WaitForChild('HumanoidRootPart')
		root.Position = workspace.BuildPlatform.Position +
			Vector3.new(math.random(-20, 20), 5, math.random(-20, 20))
	end
end)


-- rocks
for i = 1, (SLIDE_LENGTH * 50) do
	local z = math.random(-900, (SLIDE_LENGTH * 1932) - 900)
	
	local rock = game.ServerStorage.Rock:Clone()
	rock.CFrame = CFrame.new(Vector3.new(
		math.random(-250, 250), (z * (-517.638 / 1931.852)) + 2010, z) -- gets a random position on the plane of the top surface of the slide
	) * CFrame.Angles(
		math.random(0.00, 2 * math.pi), math.random(0.00, 2 * math.pi),
		math.random(0.00, 2 * math.pi) -- gets a random orientation for the rock (2Ï€ radians is equal to 360 degrees)
	)
	rock.Color = Color3.fromRGB(
		math.random(3, 17) * 15, math.random(3, 17) * 15, math.random(3, 17) * 15
	) -- gives the rock a random colour
	if math.random(1, 10) == 1 then
		rock.Size = Vector3.new(32.884, 24.879, 21.422)
	end -- 1 in 10 chance for the rock to become supersized
	rock.Parent = workspace.Rocks
end

-- spawns balls above the slide
while true do
	local ball = game.ServerStorage.Ball:Clone()
	ball.Position = Vector3.new(math.random(-250, 250), 2350, -955)
	ball.Parent = game.Workspace
	game.Debris:AddItem(ball)
	
	wait(3)
end

return worldmod
